
******************* Longest Common Prefix *******************

string longestCommonPrefix(vector<string> & strs){
    string str1 =strs[0];
    for(int i =0; i< strs.size(); i++){
        string str2 =strs[i];
        int j = 0;
        while(str1[j]==str2[j]) j++;
        str1 = str1.substr(0,j);   
    }
  }
  
  ******************* Implement strStr() *******************
  /* find the same pattern */
  
  int strStr(string haystack, string needle) {
      int n =haystack.length();
      int m =needle.length();
      
  for(int i =0; i< n-m+1; i++)
  {
  int j=0;                       // 每次從0開始找
  if(;j< m; j++){
    if(haystack[j] != needle[j])
      break;
    }
    if(j==m) return i;          //如果找到長度相同的return position
  }
  
  return -1;
  }
  
  ******************* string to interger *******************
  
  int myAtoi(string str){
          long str_int =0;
          int sign =1, i =0;               
  
       while(i< str.size())
       {
         if(str[i] =='+' ||str[i] =='-' )
          {
          sign =(str[i] =='-') ? -1: 1;
          i++;                                 // 往正負號下一個數字判斷
          } 
          while(str[i] >='0'&& str[i] <='9'){
          str_int = str_int*10 + (str[i] -'0');
          }
       
       }  
     return str_int*sign;
  }
  
  ******************* Palindrome(回文) *******************
  
  bool isPalindrome(string s){
  
  string str =lowercase(s);
  int end = str.size()-1; 
  int start =0;
  
  while(start <= end){
  
    if(str[end]!= str[start])
        retrun false;
     start++;
     end--;
  
  }
   return true;
 
  }
  ******************* Valid Anagram(判斷字串是否一樣) *******************
  
  bool isAnagram(string s , string t){
       if(s.length()!=t.length())
         return false;
         
       map<char, int> m; 
       for(auto & str: s)
          m[str]++;
          
       for(auto & str: t)
          m[str]--;
  
       for(auto & str: t){
          if(m[str]!=0){
             return false;
          }
       }
           
      return true;
 
  }
  
  ******************* string reverse *******************
  
  string reverseString(string s ){
     int first =0, end = s.length()-1;
     while(first <= end){
            swap(s[start], s[end]);
            first++;
            end--; 
     }
     retrun s;
  }

  ******************* string Parenthesis *******************
  
   vector<string> generateParenthesis(int n) {
         vector<string> res;
         addingpar(res,"",  n, m)                 // n 左邊括弧  m 右邊括弧
         return res;
   }
   
   void addingpar(vector<string>& res ,string str, int n , int m ){
        if(m> 0) addingpar(res, str+")", n , m-1);
        if(n> 0) addingpar(res, str+"(", n-1 , m + 1);
   
   }
 
   }
   
 
